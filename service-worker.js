"use strict";var precacheConfig=[["/index.html","c365e5c3f4e0f664138c4799b1b5225b"],["/static/css/main.b23618c6.css","b5fea630571d3355053c34397e30ea69"],["/static/js/main.ce872b48.js","71391eabfb7791443b422e31a6a39724"],["/static/media/CaviarDreams.3670aa49.ttf","3670aa493ee09e92c7b8e1e7c2f5b441"],["/static/media/CaviarDreams_Bold.65ab651c.ttf","65ab651cc7cebf7331a4228e830573d1"],["/static/media/CaviarDreams_BoldItalic.825e49e4.ttf","825e49e42ab834f96cf27fc09c82910d"],["/static/media/CaviarDreams_Italic.e67f5c38.ttf","e67f5c38635c8f06c286b0c33da927bb"],["/static/media/about-me-img-01.41528e93.png","41528e9358a8cd29cd75df765c7cbc03"],["/static/media/about-me-img-02.9fbac3f5.png","9fbac3f51ff86cc14d2d7e2fa8a67e5d"],["/static/media/about-me-img-03.6da953fb.png","6da953fbe61d690531b4419a70428cd8"],["/static/media/about-me-img-04.9ec08ded.png","9ec08dedb984a6461c378d49cdd3a7d4"],["/static/media/hobbies-img-01.66742135.png","667421355624be5577c2a1b0fd44723d"],["/static/media/hobbies-img-02.be361157.png","be361157cd4fc9c2c54942b8e5711fc6"],["/static/media/hobbies-img-03.6b35cd67.png","6b35cd67d422462a0baa2fed3ad3b343"],["/static/media/hobbies-img-04.473a8c8f.png","473a8c8f288a594a9473b744436d8ec5"],["/static/media/img-placeholder.00f24375.jpg","00f2437542aaa0353ca323171d3b47c9"],["/static/media/logo.ee7cd8ed.svg","ee7cd8ed2dcec943251eb2763684fc6f"],["/static/media/selfie-mobile.d2aa9272.png","d2aa9272e6f845dabe82687f6bccb91d"],["/static/media/selfie.c2c02a72.png","c2c02a723f41488f87a4138ec2edde93"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var a=new URL(e);return"/"===a.pathname.slice(-1)&&(a.pathname+=t),a.toString()},cleanResponse=function(t){return t.redirected?("body"in t?Promise.resolve(t.body):t.blob()).then(function(e){return new Response(e,{headers:t.headers,status:t.status,statusText:t.statusText})}):Promise.resolve(t)},createCacheKey=function(e,t,a,n){var c=new URL(e);return n&&c.pathname.match(n)||(c.search+=(c.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(a)),c.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var a=new URL(t).pathname;return e.some(function(e){return a.match(e)})},stripIgnoredUrlParameters=function(e,a){var t=new URL(e);return t.hash="",t.search=t.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(t){return a.every(function(e){return!e.test(t[0])})}).map(function(e){return e.join("=")}).join("&"),t.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],a=e[1],n=new URL(t,self.location),c=createCacheKey(n,hashParamName,a,/\.\w{8}\./);return[n.toString(),c]}));function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(n){return setOfCachedUrls(n).then(function(a){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(t){if(!a.has(t)){var e=new Request(t,{credentials:"same-origin"});return fetch(e).then(function(e){if(!e.ok)throw new Error("Request for "+t+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return n.put(t,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var a=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(t){return t.keys().then(function(e){return Promise.all(e.map(function(e){if(!a.has(e.url))return t.delete(e)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(t){if("GET"===t.request.method){var e,a=stripIgnoredUrlParameters(t.request.url,ignoreUrlParametersMatching),n="index.html";(e=urlsToCacheKeys.has(a))||(a=addDirectoryIndex(a,n),e=urlsToCacheKeys.has(a));var c="/index.html";!e&&"navigate"===t.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],t.request.url)&&(a=new URL(c,self.location).toString(),e=urlsToCacheKeys.has(a)),e&&t.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(a)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',t.request.url,e),fetch(t.request)}))}});